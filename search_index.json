[["index.html", "ggcirclize Reference Book Chapter 1 About 1.1 Citation 1.2 Installation", " ggcirclize Reference Book Jun Zhang 2023-12-05 Chapter 1 About ggcirclize is inspired by some circular plot R packages and is designed to create circular graph with the grammar of ggplot2. 1.1 Citation Jun Zhang (2023). Creating Circular Graph with the Grammar of GGplot2. https://github.com/junjunlab/ggcirclize 1.2 Installation You can install the development version of ggcirclize: # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;junjunlab/ggcirclize&quot;) # or remotes::install_github(&quot;junjunlab/ggcirclize&quot;) library(ggcirclize) "],["low-level-arcgrobs.html", "Chapter 2 Low level arcGrobs 2.1 arcSectorGrob 2.2 arcAxisGrob 2.3 arcPointGrob 2.4 arcSegmentsGrob 2.5 arcLinesGrob 2.6 arcRectGrob 2.7 arcPolygonGrob 2.8 arcLinksGrob 2.9 arcLinks2Grob 2.10 arcTextGrob", " Chapter 2 Low level arcGrobs Most geom layers are based on low level arcGrobs in ggciclize. This charpter we will describe the usage of these arcGrobs to better understand how the circular plot be created. 2.1 arcSectorGrob arcSectorGrob draws arc rectangle in unit circle. start,end control the sector size of the rectangle: library(ggcirclize) library(ggplot2) library(grid) newpage() grid.draw(arcSectorGrob(start = 0,end = 180)) r0,r1 control the radius of the rectangle: newpage() grid.draw(arcSectorGrob(start = 0,end = 180, r0 = 0.5,r1 = 0.8)) extend.xscale and extend.yscale control the extension of the xscale and yscale: newpage() grid.draw(arcSectorGrob(start = 0,end = 270, r0 = 0.3,r1 = 0.8, extend.xscale = 0,extend.yscale = 0)) sector.gp controls the graphics of rectangle: newpage() grid.draw(arcSectorGrob(start = 0,end = 270, r0 = 0.3,r1 = 0.8, add.xaxis = F, add.yaxis = F, extend.xscale = 0,extend.yscale = 0, sector.gp = gpar(fill = &quot;orange&quot;,col = NA))) Other parameter settings about axis can be passed in arcxAxisGrob.params and arcyAxisGrob.params arguments: newpage() grid.draw(arcSectorGrob(start = 0,end = 270, r0 = 0.5,r1 = 1, extend.xscale = 0, arcxAxisGrob.params = list(pos = &quot;bottom&quot;, xscale = c(0,100), x.label.gp = gpar(fontzie = 1)), arcyAxisGrob.params = list(yscale = c(0,10)) )) 2.2 arcAxisGrob arcAxisGrob draws arc axis in unit circle which includes xaxis and yaxis. You should define the axis.type to tell which axis to be drawn and pos to tell where the axis position to be drawn: newpage() grid.draw(arcAxisGrob(start = 0,end = 350, r0 = 0.5,r1 = 0.8, extend.xscale = 0, axis.type = &quot;x&quot;,pos = &quot;top&quot;)) breaks.n controls the numbers main ticks. nice.facing controls the axis labels rotation and the plot will be drawn on clockwise if clock.wise == TRUE: newpage() grid.draw(arcAxisGrob(start = 0,end = 350, r0 = 0.5,r1 = 0.8, extend.xscale = 0, breaks.n = 15, axis.type = &quot;x&quot;,pos = &quot;top&quot;, nice.facing = T, clock.wise = T)) You can specify the xscale to define the xaxis range: newpage() grid.draw(arcAxisGrob(start = 0,end = 350, r0 = 0.5,r1 = 0.8, extend.xscale = 0, axis.type = &quot;x&quot;,pos = &quot;top&quot;, xscale = c(1,100), breaks.n = 20)) Change the tick labels by using breaks.label: newpage() grid.draw(arcAxisGrob(start = 0,end = 350, r0 = 0.5,r1 = 0.8, extend.xscale = 0, axis.type = &quot;x&quot;,pos = &quot;top&quot;, xscale = c(1,100), breaks.n = 20, breaks.label = LETTERS[1:20])) minor.ticks.n controls the minor ticks number: newpage() grid.draw(arcAxisGrob(start = 0,end = 350, r0 = 0.5,r1 = 0.8, extend.xscale = 0, axis.type = &quot;x&quot;,pos = &quot;top&quot;, xscale = c(1,100), breaks.n = 20, breaks.label = LETTERS[1:20], minor.ticks.n = 0)) Change the position of axis: newpage() grid.draw(arcAxisGrob(start = 0,end = 350, r0 = 0.5,r1 = 0.8, extend.xscale = 0, axis.type = &quot;x&quot;,pos = &quot;bottom&quot;)) Similar settings to the y axis: newpage() grid.draw(arcSectorGrob(start = 0,end = 180, r0 = 0.2,r1 = 0.8, extend.xscale = 0, add.xaxis = F,add.yaxis = F)) grid.draw(arcAxisGrob(start = 0,end = 180, r0 = 0.2,r1 = 0.8, extend.xscale = 0, axis.type = &quot;y&quot;,pos = &quot;left&quot;)) grid.draw(arcAxisGrob(start = 0,end = 180, r0 = 0.2,r1 = 0.8, extend.xscale = 0, axis.type = &quot;y&quot;,pos = &quot;right&quot;, yscale = c(0,100), breaks.n = 5)) Use the breaks and xscale to map correct axis position to the scale range: newpage() grid.draw(arcAxisGrob(start = 13,end = 177, r0 = 0.5,r1 = 0.8, extend.xscale = 0, breaks.n = 10, axis.type = &quot;x&quot;,pos = &quot;top&quot;, nice.facing = T)) grid.draw(arcAxisGrob(start = 13,end = 177, r0 = 0.6,r1 = 0.6, extend.xscale = 0, breaks = c(23,44,61,110,125,134,151), xscale = c(13,177), nice.facing = T, axis.type = &quot;x&quot;,pos = &quot;top&quot;)) grid.draw(arcAxisGrob(start = 13,end = 177, r0 = 0.4,r1 = 0.4, extend.xscale = 0, breaks = seq(40,160,20), xscale = c(13,177), nice.facing = T, axis.type = &quot;x&quot;,pos = &quot;top&quot;)) The same situation for y axis: newpage() grid.draw(arcSectorGrob(start = 30,end = 150, r0 = 0.2,r1 = 1, extend.yscale = 0, add.xaxis = F,add.yaxis = F)) grid.draw(arcAxisGrob(start = 30,end = 150, r0 = 0.2,r1 = 1, extend.yscale = 0, yscale = c(13,83), axis.type = &quot;y&quot;,pos = &quot;left&quot;)) grid.draw(arcAxisGrob(start = 30,end = 150, r0 = 0.2,r1 = 1, extend.yscale = 0, yscale = c(13,83), breaks = c(20,40,50,70), axis.type = &quot;y&quot;,pos = &quot;right&quot;)) grid.draw(arcSectorGrob(start = 30,end = 150, r0 = 0.2,r1 = 1, extend.yscale = 0, clock.wise = T, add.xaxis = F,add.yaxis = F)) grid.draw(arcAxisGrob(start = 30,end = 150, r0 = 0.2,r1 = 1, extend.yscale = 0, yscale = c(13,83), clock.wise = T, axis.type = &quot;y&quot;,pos = &quot;left&quot;)) grid.draw(arcAxisGrob(start = 30,end = 150, r0 = 0.2,r1 = 1, extend.yscale = 0, yscale = c(13,83), clock.wise = T, breaks = seq(20,80,20), axis.type = &quot;y&quot;,pos = &quot;right&quot;)) 2.3 arcPointGrob arcPointGrob draws arc scatter point in unit circle. newpage() grid.draw(arcSectorGrob(start = 0,end = 180, r0 = 0.5,r1 = 1, arcxAxisGrob.params = list(xscale = range(mtcars$mpg)), arcyAxisGrob.params = list(yscale = range(mtcars$disp)) )) grid.draw(arcPointGrob(x = mtcars$mpg,y = mtcars$disp, start = 0,end = 180, r0 = 0.5,r1 = 1)) 2.4 arcSegmentsGrob arcSegmentsGrob draws arc segment in unit circle. newpage() grid.draw(arcSegmentsGrob(xmin = rep(1,10),xmax = rep(10,10), ymin = 1:10,ymax = 1:10, r0 = 0.5,r1 = 1,start = 0,end = 180)) Oblique line in arc plot: newpage() grid.draw(arcSegmentsGrob(xmin = c(1,1),xmax = c(5,5), ymin = c(1,1),ymax = c(3,5), r0 = 0.5,r1 = 1,start = 0,end = 180)) 2.5 arcLinesGrob arcLinesGrob draws line in arc plot in unit circle. newpage() grid.draw(arcLinesGrob(x = c(0,0.5,1),y = c(0.375,0,1), start = 0,end = 180,r0 = 0.5,r1 = 1)) 2.6 arcRectGrob arcRectGrob draws rectangle in unit circle. newpage() grid.draw(arcSectorGrob(start = 0,end = 180,r0 = 0.2,r1 = 0.8)) grid.draw(arcRectGrob(xmin = c(1,10,20),xmax = c(9,15,35), ymin = c(1,5,10),ymax = c(2,8,15), start = 0,end = 180,r0 = 0.5,r1 = 0.8)) 2.7 arcPolygonGrob arcPolygonGrob draws arc polygon in uint circle. First we draw a triangle in rectangular coordinate system: x &lt;- c(0.1,0.5,0.9) y &lt;- c(0.1,0.9,0.1) grid.newpage() grid.polygon(x = x,y = y) And we show it in arc plot: newpage() grid.draw(arcPolygonGrob(x = x,y = y, start = 0,end = 180,r0 = 0.5,r1 = 1)) Draw multiple triangles: x1 &lt;- seq(0,23,1) y1 &lt;- rep(y,8) newpage() grid.draw(arcPolygonGrob(x = x1,y = y1, id = rep(1:8,each = 3), start = 0,end = 360,r0 = 0.5,r1 = 1)) Draw different shape polygons: newpage() grid.draw(arcPolygonGrob(x = x,y = y, start = 0,end = 180,r0 = 0.5,r1 = 1)) newpage() grid.draw(arcPolygonGrob(x = c(0.1,0.2,0.3,0.4,0.5,0.4,0.7,0.6,0.7), y = c(0.1,0.9,0.1,0.1,0.5,0.9,0.9,0.5,0.1), id = c(rep(&quot;a&quot;,3),rep(&quot;b&quot;,6)), polygon.gp = gpar(fill = c(&quot;pink&quot;,&quot;orange&quot;)), start = 0,end = 180,r0 = 0.5,r1 = 1)) We show an example for ggplot2 output: ids &lt;- factor(c(&quot;1.1&quot;, &quot;2.1&quot;, &quot;1.2&quot;, &quot;2.2&quot;, &quot;1.3&quot;, &quot;2.3&quot;)) values &lt;- data.frame( id = ids, value = c(3, 3.1, 3.1, 3.2, 3.15, 3.5) ) positions &lt;- data.frame( id = rep(ids, each = 4), x = c(2, 1, 1.1, 2.2, 1, 0, 0.3, 1.1, 2.2, 1.1, 1.2, 2.5, 1.1, 0.3, 0.5, 1.2, 2.5, 1.2, 1.3, 2.7, 1.2, 0.5, 0.6, 1.3), y = c(-0.5, 0, 1, 0.5, 0, 0.5, 1.5, 1, 0.5, 1, 2.1, 1.7, 1, 1.5, 2.2, 2.1, 1.7, 2.1, 3.2, 2.8, 2.1, 2.2, 3.3, 3.2) ) # Currently we need to manually merge the two together datapoly &lt;- merge(values, positions, by = c(&quot;id&quot;)) p &lt;- ggplot(datapoly, aes(x = x, y = y)) + geom_polygon(aes(fill = value, group = id)) p Re-write by using arcPolygonGrob: newpage() grid.draw(arcPolygonGrob(x = datapoly$x,y = datapoly$y,id = datapoly$id, start = 0,end = 180,r0 = 0.5,r1 = 1, polygon.gp = gpar(fill = 1:6))) 2.8 arcLinksGrob arcLinksGrob draws connection curves in unit circle. It draws line connection when you supply single start and end. Band connection will be drawn when supplied with two degrees: newpage() grid.draw(arcLinksGrob(start = 0,end = 60,r = 1)) grid.draw(arcLinksGrob(start = 0,end = 300,r = 1)) grid.draw(arcLinksGrob(start = c(0,30),end = c(70,80),r = 1)) grid.draw(arcLinksGrob(start = c(350,360),end = c(260,270),r = 1)) curve.height controls the line arc height: newpage() grid.draw(arcLinksGrob(start = 0,end = 60,r = 1,curve.height = 1)) grid.draw(arcLinksGrob(start = 0,end = 60,r = 1,curve.height = 0.5)) Add arrows: newpage() grid.draw(arcLinksGrob(start = 0,end = 60,r = 1,curve.height = 1, curve.arrow = arrow())) grid.draw(arcLinksGrob(start = c(0,15),end = c(300,320), r = 1, start.arrow = T,end.arrow = T)) 2.9 arcLinks2Grob arcLinks2Grob is almost same as arcLinksGrob, besides, it can draw arc links with two different radius: newpage() grid.draw(arcLinks2Grob(start = c(0,15),end = c(300,320), r0 = 0.6,r1 = 1,r = 1, start.arrow = T,end.arrow = T)) get_height can get relative curve height with the degrees(0-180): newpage() grid.segments(x0 = 0,x1 = 1,y0 = 0.5,y1 = 0.5) grid.segments(x0 = 0.5,x1 = 0.5,y0 = 0,y1 = 1) st &lt;- sample(seq(0,360,10),10,replace = F) ed &lt;- sample(seq(0,360,10),10,replace = F) for (th in 1:10) { h &lt;- get_height(st[th],ed[th],0.5,1) grid.draw(arcLinks2Grob(start = st[th],end = ed[th], curve.height = h, r0 = 1,r1 = 1,r = 1)) } 2.10 arcTextGrob arcTextGrob draws curve text in unit circle. newpage() grid.draw(arcTextGrob(x = 1,y = 1, labels = &quot;This is a nice day today!&quot;, start = 0,end = 180,r0 = 0.5,r1 = 1)) Default nice.facing==TRUE: newpage() grid.draw(arcTextGrob(x = 1:20,y = rep(1,20), labels = paste0(&quot;gene &quot;,1:20), curved.label = F, start = 0,end = 360,r0 = 0.5,r1 = 1)) Youcan turn it off: newpage() grid.draw(arcTextGrob(x = 1:20,y = rep(1,20), labels = paste0(&quot;gene &quot;,1:20), curved.label = F, nice.facing = F, inward = T, start = 0,end = 360,r0 = 1,r1 = 1)) curved.label controls the labels whether be drawn in arc format: newpage() grid.draw(arcTextGrob(x = 1:20,y = 1:20, labels = rownames(USArrests)[1:20], start = 0,end = 360, r0 = 0.1,r1 = 1, curved.label = F, text.gp = gpar(fontsize = 10))) newpage() grid.draw(arcTextGrob(x = 1:20,y = 1:20, labels = rownames(USArrests)[1:20], start = 0,end = 360, r0 = 0.1,r1 = 1, curved.label = T, text.gp = gpar(fontsize = 10))) "],["geom-arc-layers.html", "Chapter 3 Geom arc layers 3.1 geom_arcpoint 3.2 geom_arcsegment 3.3 geom_arcline 3.4 geom_arcpath 3.5 geom_arcpolygon 3.6 geom_arcrect 3.7 geom_arctile 3.8 geom_arcbar 3.9 geom_arccol 3.10 geom_arcribbon 3.11 geom_arcviolin 3.12 geom_arcboxplot 3.13 geom_arcarea 3.14 geom_arcdensity 3.15 geom_archistogram 3.16 geom_arctext", " Chapter 3 Geom arc layers Based the arcGrobs we have created, we can transform them into geom layers by using ggplot2 grammer for better visualisation. The following contents we will describe relative geom arc layers. The basic arguments for each layer includes: start, end, r0, r1, clock.wise. You can re-specify them in each geom mapping parameters. 3.1 geom_arcpoint geom_arcpoint draws scatter point like geom_point. Simple scatter point: ggcirclize(data = mtcars, mapping = aes(x = mpg,y = disp)) + geom_arcpoint() Mapping with colors: ggcirclize(data = mtcars, mapping = aes(x = mpg,y = disp,end = 270)) + geom_arcpoint(aes(color = factor(cyl))) You can adjust the axis settings with yAxis.params and xAxis.params: ggcirclize(data = mtcars, mapping = aes(x = mpg,y = disp)) + geom_arcpoint(yAxis.params = list(yscale = c(100,800)), xAxis.params = list(xscale = c(-50,100))) Mapping with size and color: ggcirclize(data = mtcars, mapping = aes(x = mpg,y = disp, color = as.character(cyl),size = qsec)) + geom_arcpoint() Mapping with gradient color: ggcirclize(data = mtcars, mapping = aes(x = mpg,y = disp, color = qsec,size = qsec)) + geom_arcpoint(end = 270,r0 = 0.3,r1 = 0.8) + scale_color_gradient(low = &quot;blue&quot;,high = &quot;red&quot;) Control the background graphic settings: ggcirclize(data = mtcars,mapping = aes(x = mpg,y = disp)) + geom_arcpoint(sector.bg.fill = &quot;orange&quot;, sector.bg.lty = &quot;dashed&quot;, sector.bg.lwd = 2) 3.2 geom_arcsegment geom_arcsegment draws segment line like geom_segment. df &lt;- data.frame(x = c(rep(0,4),0:4),x1 = c(rep(4,4),0:4), y = c(0:4,rep(0,4)),y1 = c(0:4,rep(4,4)), g = LETTERS[1:9]) ggcirclize(df) + geom_arcsegment(aes(xmin = x,xmax = x1,ymin = y,ymax = y1)) Add arrows: ggcirclize(df) + geom_arcsegment(aes(xmin = x,xmax = x1,ymin = y,ymax = y1, color = g),linewidth = 3, arrow = arrow(type = &quot;closed&quot;)) 3.3 geom_arcline geom_arcline draws line like geom_line. ggcirclize(mtcars,aes(mpg,disp,color = factor(cyl))) + geom_arcline(linewidth = 5) 3.4 geom_arcpath geom_arcpath draws line like geom_path. df &lt;- data.frame(x = 1:3, y = c(4, 1, 9)) ggplot(df, aes(x, y)) + geom_path(linewidth = 10) See what geom_arcpath output: ggcirclize(df, aes(x, y)) + geom_arcpath(linewidth = 10) x &lt;- seq(0.01, .99, length.out = 100) df &lt;- data.frame( x = rep(x, 2), y = c(qlogis(x), 2 * qlogis(x)), group = rep(c(&quot;a&quot;,&quot;b&quot;), each = 100) ) ggplot(df, aes(x=x, y=y, group=group)) + geom_line(aes(colour = group), linetype = 2) ggcirclize(df, aes(x=x, y=y, group = group,color = group)) + geom_arcpath(linetype = 2) 3.5 geom_arcpolygon geom_arcpolygon draws polygon like geom_polygon. First we see output with ggplot: ids &lt;- factor(c(&quot;1.1&quot;, &quot;2.1&quot;, &quot;1.2&quot;, &quot;2.2&quot;, &quot;1.3&quot;, &quot;2.3&quot;)) values &lt;- data.frame( id = ids, value = c(3, 3.1, 3.1, 3.2, 3.15, 3.5) ) positions &lt;- data.frame( id = rep(ids, each = 4), x = c(2, 1, 1.1, 2.2, 1, 0, 0.3, 1.1, 2.2, 1.1, 1.2, 2.5, 1.1, 0.3, 0.5, 1.2, 2.5, 1.2, 1.3, 2.7, 1.2, 0.5, 0.6, 1.3), y = c(-0.5, 0, 1, 0.5, 0, 0.5, 1.5, 1, 0.5, 1, 2.1, 1.7, 1, 1.5, 2.2, 2.1, 1.7, 2.1, 3.2, 2.8, 2.1, 2.2, 3.3, 3.2) ) # Currently we need to manually merge the two together datapoly &lt;- merge(values, positions, by = c(&quot;id&quot;)) ggplot(datapoly, aes(x = x, y = y)) + geom_polygon(aes(fill = value, group = id)) geom_arcpolygon outputs: ggcirclize(datapoly, aes(x = x, y = y)) + geom_arcpolygon(aes(fill = value, group = id)) The id is used to distinguish the groups: df &lt;- data.frame(x = c(0.1,0.2,0.3,0.4,0.5,0.4,0.7,0.6,0.7), y = c(0.1,0.9,0.1,0.1,0.5,0.9,0.9,0.5,0.1), id = c(rep(1,3),rep(2,6))) ggcirclize(df, aes(x = x, y = y)) + geom_arcpolygon(aes(group = id)) d=data.frame(x=c(1,2,2, 3,4,4), y=c(1,1,2, 2,2,3), t=c(&#39;a&#39;, &#39;a&#39;, &#39;a&#39;, &#39;b&#39;, &#39;b&#39;, &#39;b&#39;), r=c(1,2,3, 4,5,6)) ggcirclize(d, aes(x = x, y = y)) + geom_arcpolygon(aes(id = t)) 3.6 geom_arcrect geom_arcrect draws rectangle like geom_rect. df &lt;- data.frame( x = rep(c(2, 5, 7, 9, 12), 2), y = rep(c(1, 2), each = 5), z = factor(rep(1:5, each = 2)), w = rep(diff(c(0, 4, 6, 8, 10, 14)), 2) ) df &lt;- df %&gt;% mutate(xmin = x - w / 2, xmax = x + w / 2, ymin = y, ymax = y + 1) ggplot(df, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax)) + geom_rect(aes(fill = z), colour = &quot;grey50&quot;) ggcirclize(df,aes(xmin = xmin,xmax = xmax,ymin = ymin,ymax = ymax)) + geom_arcrect() Mapping with color: ggcirclize(df,aes(xmin = xmin,xmax = xmax,ymin = ymin,ymax = ymax)) + geom_arcrect(aes(fill = z)) 3.7 geom_arctile geom_arctile draws rectangle like geom_tile. data(USArrests) mat &lt;- scale(USArrests) mat.long &lt;- reshape2::melt(mat) ggplot(mat.long,aes(x = Var1,y = Var2,fill = value)) + geom_tile() + scale_fill_gradient2(low = &quot;green&quot;,mid = &quot;black&quot;,high = &quot;red&quot;,midpoint = 0) + theme(axis.text.x = element_text(angle = 90,hjust = 1,vjust = 0.5)) ggcirclize(mat.long,aes(x = Var1,y = Var2,fill = value),mg.t = 2.5) + geom_arctile() + scale_fill_gradient2(low = &quot;green&quot;,mid = &quot;black&quot;,high = &quot;red&quot;,midpoint = 0) Adjust the width and height: ggcirclize(mat.long,aes(x = Var1,y = Var2,fill = value)) + geom_arctile(width = 0.5,height = 0.5) + scale_fill_gradient2(low = &quot;green&quot;,mid = &quot;black&quot;,high = &quot;red&quot;,midpoint = 0) 3.8 geom_arcbar geom_arcbar draws barplot like geom_bar. ggplot(mpg, aes(class)) + geom_bar() ggcirclize(mpg,aes(x = class)) + geom_arcbar(width = 0.5) ggcirclize(mpg,aes(x = class,fill = drv)) + geom_arcbar() ggplot(mpg, aes(class,fill = drv)) + geom_bar(position = position_dodge2()) ggcirclize(mpg,aes(x = class,fill = drv)) + geom_arcbar(position = position_dodge2()) 3.9 geom_arccol geom_arccol draws barplot like geom_col. df2 &lt;- data.frame(supp=rep(c(&quot;VC&quot;, &quot;OJ&quot;), each=3), dose=rep(c(&quot;D0.5&quot;, &quot;D1&quot;, &quot;D2&quot;),2), len=c(6.8, 15, 33, 4.2, 10, 29.5)) ggplot(df2, aes(x = dose, y = len)) + geom_col(aes(fill = supp), position = position_stack()) ggcirclize(df2,aes(x = dose, y = len)) + geom_arccol(aes(fill = supp), position = position_stack()) ggplot(df2, aes(x = dose, y = len)) + geom_col(aes(fill = supp), position = position_dodge2()) ggcirclize(df2,aes(x = dose, y = len)) + geom_arccol(aes(fill = supp), position = position_dodge2()) 3.10 geom_arcribbon geom_arcribbon draws a y interval like geom_ribbon. huron &lt;- data.frame(year = 1875:1972, level = as.vector(LakeHuron)) huron$g &lt;- sample(letters[1:3],98,replace = T) ggplot(huron, aes(year)) + geom_ribbon(aes(ymin = level - 1, ymax = level + 1), fill = &quot;grey70&quot;) ggcirclize(huron, aes(x = year)) + geom_arcribbon(aes(ymin = level - 1, ymax = level + 1), fill = &quot;grey70&quot;) 3.11 geom_arcviolin geom_arcviolin draws violin plot like geom_violin. ggplot(mtcars, aes(factor(cyl), mpg)) + geom_violin() ggcirclize(mtcars, aes(factor(cyl), mpg)) + geom_arcviolin() Horizontal violin: ggcirclize(mtcars, aes(x = mpg,y = factor(cyl))) + geom_arcviolin() Turn off trim: ggcirclize(mtcars, aes(factor(cyl), mpg)) + geom_arcviolin(trim = FALSE) Mapping with color: ggcirclize(mtcars, aes(factor(cyl), mpg)) + geom_arcviolin(aes(fill = factor(cyl))) Multiple groups: ggcirclize(mtcars, aes(factor(cyl), mpg)) + geom_arcviolin(aes(fill = factor(am))) Draw quantiles: ggcirclize(mtcars, aes(factor(cyl), mpg)) + geom_arcviolin(draw_quantiles = c(0.25, 0.5, 0.75), polar.every = T) Multiple violins: dbox &lt;- data.frame(x = rep(LETTERS[1:26],50), y = rnorm(50*26)) ggcirclize(dbox, aes(x, y,start = 0,end = 360)) + geom_arcviolin(aes(r0 = 0.55,r1 = 0.75), draw_quantiles = c(0.25, 0.5, 0.75), show.legend = F) 3.12 geom_arcboxplot geom_arcboxplot draws boxplot like geom_boxplot. ggplot(mpg, aes(class, hwy)) + geom_boxplot() ggcirclize(mpg, aes(class, hwy)) + geom_arcboxplot() Change the outlier point graphic settings: ggcirclize(mpg, aes(class, hwy)) + geom_arcboxplot(outlier.size = 5,outlier.colour = &quot;red&quot;) Horizontal boxplot: ggcirclize(mpg, aes(x = hwy, y = class)) + geom_arcboxplot() Add notch: ggplot(mpg, aes(class, hwy)) + geom_boxplot(notch = TRUE) ggcirclize(mpg, aes(class, hwy)) + geom_arcboxplot(notch = TRUE) ggcirclize(mpg, aes(class, hwy)) + geom_arcboxplot(varwidth = TRUE) Multiple groups: ggcirclize(mpg, aes(class, hwy)) + geom_arcboxplot(aes(colour = drv)) 3.13 geom_arcarea geom_arcarea draws a y interval like geom_area. set.seed(1234) df &lt;- data.frame( sex=factor(rep(c(&quot;F&quot;, &quot;M&quot;), each=200)), weight=round(c(rnorm(200, mean=55, sd=5), rnorm(200, mean=65, sd=5))) ) ggplot(df, aes(x=weight)) + geom_area(stat = &quot;bin&quot;) ggcirclize(df, aes(x=weight)) + geom_arcarea(stat = &quot;bin&quot;) Multiple groups: ggplot(df, aes(x=weight, fill=sex)) + geom_area(stat =&quot;bin&quot;) ggcirclize(df, aes(x=weight, fill=sex)) + geom_arcarea(stat = &quot;bin&quot;) 3.14 geom_arcdensity geom_arcdensity draws kernel density estimate like geom_density. ggplot(diamonds, aes(carat)) + geom_density() ggcirclize(diamonds, aes(carat)) + geom_arcdensity() ggplot(diamonds, aes(y = carat)) + geom_density() ggcirclize(diamonds, aes(y = carat)) + geom_arcdensity() Mapping with color: ggcirclize(diamonds, aes(depth, fill = cut, colour = cut)) + geom_arcdensity(alpha = 0.1) Different position mode: ggplot(diamonds, aes(carat, fill = cut)) + geom_density(position = &quot;stack&quot;) ggcirclize(diamonds, aes(x = carat, fill = cut)) + geom_arcdensity(position = &quot;stack&quot;) ggcirclize(diamonds, aes(carat, after_stat(count), fill = cut)) + geom_arcdensity(position = &quot;fill&quot;) 3.15 geom_archistogram geom_archistogram draws frequency polygons like geom_histogram. ggplot(diamonds, aes(carat)) + geom_histogram() ggcirclize(diamonds, aes(carat)) + geom_archistogram() Change the binwidth: ggcirclize(diamonds, aes(carat)) + geom_archistogram(binwidth = 0.01) 3.16 geom_arctext geom_arctext draws arc text in unit circle. df &lt;- data.frame(x = 1:20,y = 1,y1 = 1:20,id = sample(LETTERS[1:4],20,replace = T), label = rownames(USArrests)[1:20]) ggcirclize(df, aes(x, y, label = label)) + geom_arctext(aes(r0 = 1,end = 360)) ggcirclize(df, aes(x, y, label = label)) + geom_arctext(aes(r0 = 1,end = 360,color = id)) Change curved.label=FALSE: ggcirclize(df, aes(x, y, label = label)) + geom_arctext(aes(r0 = 1,end = 360,color = id), curved.label = F) "],["geom-track-layers.html", "Chapter 4 Geom track layers 4.1 geom_trackpoint 4.2 geom_tracktile 4.3 geom_trackbar 4.4 geom_trackcol 4.5 geom_trackdensity 4.6 geom_trackhist 4.7 geom_trackviolin 4.8 geom_trackboxplot", " Chapter 4 Geom track layers To visualize data with various categories, ggplot2 can use facet_wrap and facet_grid to put different group data into different sub-panels. We can use different sectors to group by the data. geom_track* layers works like facet_wrap. It puts different category data in each sector. We should give a mapping variable sector to define which column will be used. 4.1 geom_trackpoint ggplot(mtcars,aes(x = mpg,y = disp,color = factor(cyl))) + geom_point() + facet_wrap(~cyl) ggcirclize(data = mtcars, mapping = aes(x = mpg,y = disp,sector = cyl,end = 360, color = factor(cyl))) + geom_trackpoint() ggcirclize(data = mtcars, mapping = aes(x = mpg,y = disp,sector = cyl,end = 360, color = factor(cyl))) + geom_trackpoint(xAxis.params = list(pos = &quot;bottom&quot;)) sector.gap change the gap between sectors: ggcirclize(data = mtcars, mapping = aes(x = mpg,y = disp,sector = cyl,end = 360, color = factor(cyl))) + geom_trackpoint(sector.gap = 20,strip.label.pos = &quot;bottom&quot;) You can set scales with fixed/free/free_x/free_y to adjust x and y scale range for each sector: ggcirclize(data = mtcars, mapping = aes(x = mpg,y = disp,sector = cyl, color = factor(cyl), start = 0,end = 360)) + geom_trackpoint(sector.gap = 20,scales = &quot;free_y&quot;) ggcirclize(data = mtcars, mapping = aes(x = mpg,y = disp,sector = cyl, color = factor(cyl), start = 0,end = 360)) + geom_trackpoint(sector.gap = 20,scales = &quot;free&quot;) set.seed(111) mat &lt;- matrix(sample(seq(0,20,length = 400),400,replace = T),ncol = 20) rownames(mat) &lt;- paste0(&quot;gene&quot;,1:20) colnames(mat) &lt;- paste0(&quot;samp&quot;,1:20) mat_long &lt;- reshape2::melt(mat) mat_long$gp &lt;- rep(LETTERS[1:4],50) ggcirclize(data = mat_long, mapping = aes(x = Var1,y = Var2,size = value,color = value, sector = gp,end = 360)) + geom_trackpoint(strip.label.pos = &quot;bottom&quot;,sector.gap = 20,scales = &quot;fixed&quot;) ggcirclize(data = mat_long, mapping = aes(x = Var1,y = Var2,size = value,color = value, sector = gp,end = 360)) + geom_trackpoint(strip.label.pos = &quot;bottom&quot;,sector.gap = 20,scales = &quot;free_x&quot;) 4.2 geom_tracktile mat &lt;- scale(USArrests) mat.long &lt;- reshape2::melt(mat) # mat.long$gp &lt;- rep(LETTERS[1:4],each = 50) mat.long$gp &lt;- sample(LETTERS[1:4],200,replace = T) # mat.long$Var1 &lt;- sample(colnames(mat),200,replace = T) ggplot(mat.long,aes(x = Var1,y = Var2,fill = value)) + geom_tile() + scale_fill_gradient2(low = &quot;green&quot;,mid = &quot;black&quot;,high = &quot;red&quot;,midpoint = 0) + theme(axis.text.x = element_text(angle = 90,hjust = 1,vjust = 0.5)) + facet_wrap(~gp,scales = &quot;fixed&quot;) ggcirclize(data = mat.long,mg.t = 2.5,mg.b = 2.5, mapping = aes(x = Var1,y = Var2,fill = value, sector = gp,end = 360)) + geom_tracktile(add.yaxis = T,strip.label.pos = &quot;bottom&quot;, scales = &quot;fixed&quot;) + scale_fill_gradient2(low = &quot;green&quot;,mid = &quot;black&quot;,high = &quot;red&quot;,midpoint = 0) 4.3 geom_trackbar ggcirclize(mpg,aes(x = class,fill = drv,sector = drv)) + geom_trackbar(strip.label.pos = &quot;bottom&quot;,sector.gap = 20, scales = &quot;free_y&quot;) ggcirclize(mpg,aes(x = class,fill = drv,sector = drv)) + geom_trackbar(strip.label.pos = &quot;bottom&quot;, scales = &quot;free_x&quot;) 4.4 geom_trackcol df &lt;- data.frame(x = LETTERS[1:20],y = abs(rnorm(20)), gp = sample(letters[1:4],20,replace = T)) ggcirclize(df,aes(x = x,y = y,fill = x,sector = gp)) + geom_trackcol(aes(end = 360),strip.label.pos = &quot;bottom&quot;, sector.gap = 20,width = 0.5,add.bg = F, scales = &quot;free_x&quot;) 4.5 geom_trackdensity ggcirclize(diamonds,aes(x = depth,fill = cut,sector = cut)) + geom_trackdensity(aes(end = 360),strip.label.pos = &quot;bottom&quot;) ggcirclize(diamonds,aes(x = depth,fill = cut,sector = cut)) + geom_trackdensity(aes(end = 360),strip.label.pos = &quot;bottom&quot;, scales = &quot;free_y&quot;) ## geom_trackarea ggcirclize(df, aes(x = weight, fill = sex,sector = sex)) + geom_trackarea(stat =&quot;bin&quot;) 4.6 geom_trackhist ggcirclize(diamonds,aes(x = depth,fill = color,sector = color)) + geom_trackhist(aes(end = 360),strip.label.pos = &quot;bottom&quot;, sector.gap = 20, scales = &quot;free_y&quot;) 4.7 geom_trackviolin ggcirclize(dbox, aes(x, y,start = 0,end = 360,sector = gp)) + geom_trackviolin(aes(fill = gp),scales = &quot;free&quot;) 4.8 geom_trackboxplot set.seed(111) dbox &lt;- data.frame(x = rep(LETTERS[1:26],50), y = rnorm(50*26), gp = sample(LETTERS[1:4],26,replace = T)) ggcirclize(dbox, aes(x, y,start = 0,end = 360,sector = gp)) + geom_trackboxplot(aes(fill = gp),scales = &quot;free&quot;) "],["geom-genomic-track-layers.html", "Chapter 5 Geom genomic track layers 5.1 Load genome data 5.2 geom_trackgenomicpoint 5.3 geom_trackgenomicrect 5.4 geom_trackgenomictile 5.5 geom_trackgenomicarea 5.6 geom_trackgenomicline 5.7 geom_trackgenomicdensity 5.8 geom_trackgenomicrainfall 5.9 geom_trackgenomiclink 5.10 geom_trackgenomiclabel 5.11 geom_trackgenomiclabel2", " Chapter 5 Geom genomic track layers There are also some geom layers to visualize genomic data on genome. There have been human(hg38,hg19) and mouse(mm39,mm10,mm9) cytoband data and chromosome length data in ggcirclize package. Most of the genomic track layers need chr,gstart,gend basic mapping variables. Besides you need supply chrom_data parameters to define the chromosome length. 5.1 Load genome data First we load hg19 cytoband and chromosome size: data(&quot;hg19_chrom_info&quot;) chrom_hg19 &lt;- hg19_chrom_info$chromsize # check head(chrom_hg19,3) # V1 V2 # 1 chr1 249250621 # 2 chr2 243199373 # 3 chr3 198022430 cytoband_hg19 &lt;- hg19_chrom_info$cytoband # check head(cytoband_hg19,3) # chr start end band stain # 1 chr1 0 2300000 p36.33 gneg # 2 chr1 2300000 5400000 p36.32 gpos25 # 3 chr1 5400000 7200000 p36.31 gneg Generate test data: bed = generateRandomBed(nr = 300) # check head(bed,3) # chr start end value1 # 1 chr1 241643 651934 0.65579256 # 2 chr1 11498530 20934324 -1.14565565 # 3 chr1 22192283 23811229 0.09296219 5.2 geom_trackgenomicpoint ggcirclize(bed,aes(end = 360, chr = chr,gstart = start,gend = end, value = value1)) + geom_trackgenomicpoint(chrom_data = chrom_hg19) Mapping with color: ggcirclize(bed,aes(end = 360, chr = chr,gstart = start,gend = end, color = chr, value = value1)) + geom_trackgenomicpoint(chrom_data = chrom_hg19) space=fixed can make the size of each sector be same: ggcirclize(bed,aes(end = 360, chr = chr,gstart = start,gend = end, color = chr, value = value1)) + geom_trackgenomicpoint(chrom_data = chrom_hg19, space = &quot;fixed&quot;) 5.3 geom_trackgenomicrect bed = generateRandomBed(nr = 300) bed &lt;- subset(bed,chr %in% c(&quot;chr1&quot;,&quot;chr2&quot;,&quot;chr3&quot;,&quot;chr4&quot;)) bed$ymin &lt;- sample(seq(0,1,0.1),nrow(bed),replace = T) bed$ymax &lt;- bed$ymin + 0.2 bed$group &lt;- sample(LETTERS[1:4],nrow(bed),replace = T) # check head(bed) # chr start end value1 ymin ymax group # 1 chr1 114048 7101411 -0.2895206 0.1 0.3 D # 2 chr1 8732752 11662832 -1.0575720 0.5 0.7 A # 3 chr1 13705322 16977193 0.5415639 0.2 0.4 A # 4 chr1 21827870 26896494 -0.7159598 0.8 1.0 B # 5 chr1 28397265 30759921 -0.1669718 1.0 1.2 A # 6 chr1 36176151 52241396 0.2176396 0.4 0.6 B ggcirclize(bed, aes(end = 360, chr = chr,gstart = start,gend = end)) + geom_trackgenomicrect(aes(ymin = ymin,ymax = ymax), chrom_data = chrom_hg19) ggcirclize(bed, aes(end = 360, chr = chr,gstart = start,gend = end)) + geom_trackgenomicrect(aes(ymin = ymin,ymax = ymax,fill = group), chrom_data = chrom_hg19) Add chromosome cytoband: bed = generateRandomBed(nr = 300) ggcirclize(mapping = aes(start = 0,end = 360)) + geom_trackgenomicrect(data = cytoband_hg19, aes(r0 = 0.9,r1 = 0.95, chr = chr,gstart = start,gend = end, fill = stain), color = NA,chrom_data = chrom_hg19) + scale_fill_manual(values = c(&quot;gneg&quot; = &quot;white&quot;,&quot;gpos25&quot; = &quot;grey75&quot;,&quot;gpos50&quot; = &quot;grey50&quot;, &quot;gpos100&quot; = &quot;black&quot;,&quot;gvar&quot; = &quot;black&quot;,&quot;acen&quot; = &quot;red&quot;, &quot;stalk&quot; = &quot;blue&quot;)) + geom_trackgenomicpoint(data = bed, aes(r0 = 0.5,r1 = 0.9,clock.wise = F, chr = chr,gstart = start,gend = end, value = value1,color = chr), add.xaxis = F,strip.label = F, chrom_data = chrom_hg19) 5.4 geom_trackgenomictile bed = generateRandomBed(nr = 100, nc = 4) # check head(bed,3) # chr start end value1 value2 value3 value4 # 1 chr1 4833203 25608564 0.4822349 0.2058859 0.01484909 -0.5005523 # 2 chr1 48610396 76802798 0.7022751 0.4851126 -1.38951435 0.6165077 # 3 chr1 79055730 87730120 -0.3187775 0.4399068 0.51394522 0.2435110 bed_long &lt;- bedMatTolong(bed) head(bed_long,3) # chr start end x variable value y # 1 chr1 4833203 25608564 1 value1 0.4822349 1 # 2 chr1 48610396 76802798 2 value1 0.7022751 1 # 3 chr1 79055730 87730120 3 value1 -0.3187775 1 ggcirclize(bed_long,aes(end = 360,r0 = 0.5,r1 = 0.8, chr = chr,gstart = start,gend = end)) + geom_trackgenomictile(aes(x = x,y = y,fill = value), chrom_data = chrom_hg19,strip.label = T) + scale_fill_gradient2(low = &quot;green&quot;,mid = &quot;white&quot;,high = &quot;red&quot;,midpoint = 0) add_link can draw connection with the origin chromosome region: ggcirclize(bed_long,aes(end = 360,r0 = 0.5,r1 = 0.7, chr = chr,gstart = start,gend = end)) + geom_trackgenomictile(aes(x = x,y = y,fill = value), chrom_data = chrom_hg19,strip.label = T, add_link = T, link_pos = &quot;top&quot;) + scale_fill_gradient2(low = &quot;green&quot;,mid = &quot;white&quot;,high = &quot;red&quot;,midpoint = 0) Change link line color: ggcirclize(bed_long,aes(end = 360,r0 = 0.5,r1 = 0.7, chr = chr,gstart = start,gend = end)) + geom_trackgenomictile(aes(x = x,y = y,fill = value), chrom_data = chrom_hg19,strip.label = T, add_link = T, link_pos = &quot;bottom&quot;, link_col = circlize::rand_color(24)) + scale_fill_gradient2(low = &quot;green&quot;,mid = &quot;white&quot;,high = &quot;red&quot;,midpoint = 0) Add cytoband plot: library(ggnewscale) ggcirclize(bed_long,aes(end = 360,r0 = 0.4,r1 = 0.68, chr = chr,gstart = start,gend = end)) + geom_trackgenomictile(aes(x = x,y = y,fill = value), chrom_data = chrom_hg19,strip.label = F, add_link = T, link_pos = &quot;top&quot;, link_col = circlize::rand_color(24)) + scale_fill_gradient2(low = &quot;green&quot;,mid = &quot;white&quot;,high = &quot;red&quot;,midpoint = 0) + # ============================================================================ new_scale_fill() + geom_trackgenomicrect(data = cytoband_hg19, aes(r0 = 0.8,r1 = 0.85,fill = stain), color = NA,chrom_data = chrom_hg19) + scale_fill_manual(values = c(&quot;gneg&quot; = &quot;white&quot;,&quot;gpos25&quot; = &quot;grey75&quot;,&quot;gpos50&quot; = &quot;grey50&quot;, &quot;gpos100&quot; = &quot;black&quot;,&quot;gvar&quot; = &quot;black&quot;,&quot;acen&quot; = &quot;red&quot;, &quot;stalk&quot; = &quot;blue&quot;)) Change the position: ggcirclize(bed_long,aes(end = 360,r0 = 0.6,r1 = 0.9, chr = chr,gstart = start,gend = end)) + geom_trackgenomictile(aes(x = x,y = y,fill = value), chrom_data = chrom_hg19,strip.label = T, add_link = T, link_pos = &quot;bottom&quot;, link_col = circlize::rand_color(24)) + scale_fill_gradient2(low = &quot;green&quot;,mid = &quot;white&quot;,high = &quot;red&quot;,midpoint = 0) + # ============================================================================ new_scale_fill() + geom_trackgenomicrect(data = cytoband_hg19, strip.label = F, add.xaxis = F, # xAxis.params = list(pos = &quot;bottom&quot;), aes(r0 = 0.43,r1 = 0.48,fill = stain), color = NA,chrom_data = chrom_hg19) + scale_fill_manual(values = c(&quot;gneg&quot; = &quot;white&quot;,&quot;gpos25&quot; = &quot;grey75&quot;,&quot;gpos50&quot; = &quot;grey50&quot;, &quot;gpos100&quot; = &quot;black&quot;,&quot;gvar&quot; = &quot;black&quot;,&quot;acen&quot; = &quot;red&quot;, &quot;stalk&quot; = &quot;blue&quot;)) 5.5 geom_trackgenomicarea bed = generateRandomBed(nr = 300) ggcirclize(bed,aes(end = 360,fill = chr, chr = chr,gstart = start,gend = end, value = value1)) + geom_trackgenomicarea(chrom_data = chrom_hg19) 5.6 geom_trackgenomicline bed = generateRandomBed(nr = 300) ggcirclize(bed,aes(end = 360,color = chr, chr = chr,gstart = start,gend = end, value = value1)) + geom_trackgenomicline(chrom_data = chrom_hg19) 5.7 geom_trackgenomicdensity load(system.file(package = &quot;circlize&quot;, &quot;extdata&quot;, &quot;DMR.RData&quot;)) ggcirclize(DMR_hyper,aes(end = 360, chr = chr,gstart = start,gend = end)) + geom_trackgenomicdensity(chrom_data = chrom_hg19) ggcirclize(DMR_hyper,aes(end = 360, chr = chr,gstart = start,gend = end)) + geom_trackgenomicdensity(chrom_data = chrom_hg19,fill = &quot;pink&quot;,color = NA) Draw partial chromosomes: ggcirclize(DMR_hyper %&gt;% filter(chr %in% c(paste0(&quot;chr&quot;,1:6),&quot;chr20&quot;,&quot;chrX&quot;)), aes(end = 360, chr = chr,gstart = start,gend = end)) + geom_trackgenomicdensity(chrom_data = chrom_hg19,fill = &quot;pink&quot;,color = NA) Keep all chromosomes: ggcirclize(DMR_hyper %&gt;% filter(chr %in% c(paste0(&quot;chr&quot;,1:6),&quot;chr20&quot;,&quot;chrX&quot;)), aes(end = 360, chr = chr,gstart = start,gend = end)) + geom_trackgenomicdensity(chrom_data = chrom_hg19,fill = &quot;pink&quot;,color = NA, keep.all.chrom = T) 5.8 geom_trackgenomicrainfall load(system.file(package = &quot;circlize&quot;, &quot;extdata&quot;, &quot;DMR.RData&quot;)) cb &lt;- rbind(DMR_hyper,DMR_hypo) cb$group &lt;- c(rep(&quot;DMR_hyper&quot;,nrow(DMR_hyper)), rep(&quot;DMR_hypo&quot;,nrow(DMR_hypo))) ggcirclize(cb, aes(end = 360,color = group, chr = chr,gstart = start,gend = end)) + geom_trackgenomicrainfall(chrom_data = chrom_hg19,size = 1) + scale_color_manual(values = c(DMR_hyper = &quot;red&quot;,DMR_hypo = &quot;blue&quot;)) 5.9 geom_trackgenomiclink geom_trackgenomiclink need “chr0”, “gstart0”, “gend0”, “chr1”, “gstart1” and “gend1” mapping variables. set.seed(123) bed1 = generateRandomBed(nr = 100) bed1 = bed1[sample(nrow(bed1), 20), ] bed2 = generateRandomBed(nr = 100) bed2 = bed2[sample(nrow(bed2), 20), ] bed_link &lt;- cbind(bed1[,1:3],bed2[,1:3]) colnames(bed_link) &lt;- c(&quot;chr1&quot;,&quot;start1&quot;,&quot;end1&quot;,&quot;chr2&quot;,&quot;start2&quot;,&quot;end2&quot;) bed_link$value &lt;- rnorm(nrow(bed_link)) bed_link$group &lt;- sample(LETTERS[1:6],nrow(bed_link),replace = T) bed_c &lt;- rbind(bed1,bed2) # check head(bed_link,3) # chr1 start1 end1 chr2 start2 end2 value group # 41 chr6 102324459 147617643 chr16 59796357 69153026 -0.2506477 A # 89 chr17 65167455 77619820 chrX 46532875 81569809 1.5202752 B # 63 chr11 13366995 32331617 chr5 172937687 180577320 -2.0932565 B Plot: ggcirclize(bed_link,aes(end = 360, chr0 = chr1,gstart0 = start1, chr1 = chr2,gstart1 = start2)) + geom_trackgenomiclink(aes(r = 1),chrom_data = chrom_hg19) ggcirclize(bed_link,aes(end = 360, chr0 = chr1,gend0 = end1, chr1 = chr2,gend1 = end2)) + geom_trackgenomiclink(aes(r = 1),chrom_data = chrom_hg19) Add arrows: ggcirclize(bed_link,aes(end = 360,color = group,fill = group, chr0 = chr1,gstart0 = start1, chr1 = chr2,gstart1 = start2)) + geom_trackgenomiclink(aes(r = 1),chrom_data = chrom_hg19, curve.arrow = arrow(type = &quot;closed&quot;,end = &quot;both&quot;)) ggcirclize(bed_link,aes(end = 360, chr0 = chr1,gstart0 = start1,gend0 = end1, chr1 = chr2,gstart1 = start2,gend1 = end2)) + geom_trackgenomiclink(aes(r = 1),chrom_data = chrom_hg19) Mapping with color: ggcirclize(bed_link,aes(end = 360, chr0 = chr1,gstart0 = start1,gend0 = end1, chr1 = chr2,gstart1 = start2,gend1 = end2)) + geom_trackgenomiclink(aes(r = 1,fill = group), chrom_data = chrom_hg19, keep.all.chrom = T) ggcirclize(bed_link,aes(end = 360, chr0 = chr1,gstart0 = start1,gend0 = end1, chr1 = chr2,gstart1 = start2,gend1 = end2)) + geom_trackgenomiclink(aes(r = 1,fill = value), chrom_data = chrom_hg19, keep.all.chrom = T, start.arrow = T,end.arrow = T) ggcirclize(bed_link,aes(end = 360, chr0 = chr1,gstart0 = start1,gend0 = end1, chr1 = chr2,gstart1 = start2,gend1 = end2)) + geom_trackgenomiclink(aes(r = 1),fill = &quot;grey90&quot;, chrom_data = chrom_hg19, keep.all.chrom = T, start.arrow = T,end.arrow = T, linetype = &quot;dashed&quot;,linewidth = 1.5) Combine multiple layers: ggcirclize(bed_link,aes(end = 360)) + geom_trackgenomiclink(aes(chr0 = chr1,gstart0 = start1,gend0 = end1, chr1 = chr2,gstart1 = start2,gend1 = end2, r = 0.5), strip.label = F, keep.all.chrom = T, chrom_data = chrom_hg19) + geom_trackgenomicrect(data = bed_c, aes(start = 0,r0 = 0.55,r1 = 0.75, chr = chr, gstart = start, gend = end), fill = &quot;orange&quot;,strip.label = F,add.xaxis = F, keep.all.chrom = T, chrom_data = chrom_hg19) + geom_trackgenomicpoint(data = bed_c, aes(start = 0,r0 = 0.75,r1 = 0.95, chr = chr, gstart = start, gend = end,value = value1), keep.all.chrom = T, chrom_data = chrom_hg19) 5.10 geom_trackgenomiclabel set.seed(111) bed = generateRandomBed(nr = 50, fun = function(k) sample(letters, k, replace = TRUE)) bed$label &lt;- sample(paste0(&quot;gene &quot;,1:55),55,replace = F) ggcirclize(bed,aes(end = 360,r0 = 0.7,r1 = 0.7, chr = chr,gstart = start,gend = end, label = label)) + geom_trackgenomiclabel(chrom_data = chrom_hg19) Change the connection position: ggcirclize(bed,aes(end = 360,r0 = 0.7,r1 = 0.7, chr = chr,gstart = start,gend = end, label = label)) + geom_trackgenomiclabel(chrom_data = chrom_hg19, link_pos = &quot;bottom&quot;, strip.label.pos = &quot;bottom&quot;) Change connection color: ggcirclize(bed,aes(end = 360,r0 = 0.9,r1 = 0.9, chr = chr,gstart = start,gend = end, label = label)) + geom_trackgenomiclabel(chrom_data = chrom_hg19, link_col = circlize::rand_color(24), label.col = circlize::rand_color(24)) 5.11 geom_trackgenomiclabel2 geom_trackgenomiclabel2 will use enough space to adjust the labels rather than put them into each sector. set.seed(111) bed = generateRandomBed(nr = 50, fun = function(k) sample(letters, k, replace = TRUE)) bed$label &lt;- sample(paste0(&quot;gene &quot;,1:55),55,replace = F) ggcirclize(bed,aes(end = 360, chr = chr,gstart = start,gend = end, label = label)) + geom_trackgenomiclabel2(aes(r0 = 0.7,r1 = 0.7),chrom_data = chrom_hg19) ggcirclize(bed,aes(end = 360, chr = chr,gstart = start,gend = end, label = label)) + geom_trackgenomiclabel2(aes(r0 = 0.7,r1 = 0.7),chrom_data = chrom_hg19, link_pos = &quot;bottom&quot;, strip.label.pos = &quot;bottom&quot;) ggcirclize(bed,aes(end = 360, chr = chr,gstart = start,gend = end, label = label,color = chr)) + geom_trackgenomiclabel2(aes(r0 = 0.7,r1 = 0.7), chrom_data = chrom_hg19) ggcirclize(bed,aes(end = 360, chr = chr,gstart = start,gend = end, label = label)) + geom_trackgenomiclabel2(aes(r0 = 0.5,r1 = 0.5),chrom_data = chrom_hg19, strip.label = F) + geom_trackgenomiclabel(aes(r0 = 0.8,r1 = 0.8), link_pos = &quot;bottom&quot;,strip.label = F, chrom_data = chrom_hg19) "],["geom-chorddiagram.html", "Chapter 6 Geom chordDiagram", " Chapter 6 Geom chordDiagram geom_chordDiagram is used to make chord diagram to show relations of multiple data. Parepare data: library(ggcirclize) library(ggplot2) set.seed(999) mat = matrix(sample(18, 18), 3, 6) rownames(mat) = paste0(&quot;S&quot;, 1:3) colnames(mat) = paste0(&quot;E&quot;, 1:6) mat # E1 E2 E3 E4 E5 E6 # S1 4 14 13 17 5 2 # S2 7 1 6 8 12 15 # S3 9 10 3 16 11 18 df = data.frame(from = rep(rownames(mat), times = ncol(mat)), to = rep(colnames(mat), each = nrow(mat)), value = as.vector(mat), stringsAsFactors = FALSE) head(df,3) # from to value # 1 S1 E1 4 # 2 S2 E1 7 # 3 S3 E1 9 ggcirclize(df,aes(end = 360,r = 0.8, from = from,to = to,value = value)) + geom_chordDiagram() ggcirclize(df,aes(end = 360,r = 0.8, from = from,to = to,value = value)) + geom_chordDiagram(aes(fill = from)) Change the orders: ggcirclize(df,aes(end = 360,r = 0.8, from = from,to = to,value = value)) + geom_chordDiagram(aes(fill = from), sector.order = c(&quot;S2&quot;,&quot;S1&quot;,&quot;S3&quot;,paste0(&quot;E&quot;,6:1))) Highlight the from direction: ggcirclize(df,aes(end = 360,r = 0.8, from = from,to = to,value = value)) + geom_chordDiagram(aes(fill = from), directional = 1) Highlight the to direction: ggcirclize(df,aes(end = 360,r = 0.8, from = from,to = to,value = value)) + geom_chordDiagram(aes(fill = from), directional = -1) Add arrows: ggcirclize(df,aes(end = 360,r = 0.8, from = from,to = to,value = value)) + geom_chordDiagram(aes(fill = from), directional = -1, start.arrow = T,end.arrow = T,arrow.len = 0.06) Add curve lines: ggcirclize(df,aes(end = 360,r = 0.8, from = from,to = to,value = value)) + geom_chordDiagram(aes(color = from,fill = from), link2line = T, curve.arrow = arrow(type = &quot;closed&quot;,length = unit(0.2,&quot;cm&quot;))) If the names overlap for from and to variable: set.seed(111) matx = matrix(sample(seq(1,50,1),15,replace = T), 3) colnames(matx) &lt;- paste0(&quot;C&quot;,1:5) rownames(matx) &lt;- paste0(&quot;C&quot;,1:3) matx # C1 C2 C3 C4 C5 # C1 14 47 35 49 36 # C2 20 25 8 45 47 # C3 19 5 26 10 8 df &lt;- reshape2::melt(matx) colnames(df) &lt;- c(&quot;from&quot;,&quot;to&quot;,&quot;value&quot;) # check head(df,3) # from to value # 1 C1 C1 14 # 2 C2 C1 20 # 3 C3 C1 19 ggcirclize(df,aes(end = 360,r = 0.8, from = from,to = to,value = value)) + geom_chordDiagram(aes(fill = from)) ggcirclize(df,aes(end = 360,r = 0.8, from = from,to = to,value = value)) + geom_chordDiagram(aes(fill = from),directional = 1) ggcirclize(df,aes(end = 360,r = 0.8, from = from,to = to,value = value)) + geom_chordDiagram(aes(fill = from),directional = -1) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
